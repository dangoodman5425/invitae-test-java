/*
 * This file is generated by jOOQ.
 */
package com.invitae.lab.platform.variant.schema.jooq.tables;


import com.invitae.lab.platform.variant.schema.jooq.Keys;
import com.invitae.lab.platform.variant.schema.jooq.Public;
import com.invitae.lab.platform.variant.schema.jooq.tables.records.VariantRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Variant extends TableImpl<VariantRecord> {

    private static final long serialVersionUID = -930496767;

    /**
     * The reference instance of <code>public.variant</code>
     */
    public static final Variant VARIANT = new Variant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VariantRecord> getRecordType() {
        return VariantRecord.class;
    }

    /**
     * The column <code>public.variant.variant_id</code>.
     */
    public final TableField<VariantRecord, UUID> VARIANT_ID = createField(DSL.name("variant_id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.variant.gene</code>.
     */
    public final TableField<VariantRecord, String> GENE = createField(DSL.name("gene"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.variant.nucleotide_change</code>.
     */
    public final TableField<VariantRecord, String> NUCLEOTIDE_CHANGE = createField(DSL.name("nucleotide_change"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.variant.protein_change</code>.
     */
    public final TableField<VariantRecord, String> PROTEIN_CHANGE = createField(DSL.name("protein_change"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.variant.last_evaluated</code>.
     */
    public final TableField<VariantRecord, LocalDateTime> LAST_EVALUATED = createField(DSL.name("last_evaluated"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.variant.created</code>.
     */
    public final TableField<VariantRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>public.variant</code> table reference
     */
    public Variant() {
        this(DSL.name("variant"), null);
    }

    /**
     * Create an aliased <code>public.variant</code> table reference
     */
    public Variant(String alias) {
        this(DSL.name(alias), VARIANT);
    }

    /**
     * Create an aliased <code>public.variant</code> table reference
     */
    public Variant(Name alias) {
        this(alias, VARIANT);
    }

    private Variant(Name alias, Table<VariantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Variant(Name alias, Table<VariantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Variant(Table<O> child, ForeignKey<O, VariantRecord> key) {
        super(child, key, VARIANT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<VariantRecord> getPrimaryKey() {
        return Keys.VARIANT_PKEY;
    }

    @Override
    public List<UniqueKey<VariantRecord>> getKeys() {
        return Arrays.<UniqueKey<VariantRecord>>asList(Keys.VARIANT_PKEY, Keys.VARIANT_GENE_NUCLEOTIDE_CHANGE_PROTEIN_CHANGE_KEY);
    }

    @Override
    public Variant as(String alias) {
        return new Variant(DSL.name(alias), this);
    }

    @Override
    public Variant as(Name alias) {
        return new Variant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Variant rename(String name) {
        return new Variant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Variant rename(Name name) {
        return new Variant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
